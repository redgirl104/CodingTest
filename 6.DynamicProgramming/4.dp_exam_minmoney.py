"""
효율적인 화폐 구성
- N가지 종류의 화폐
- 이 화폐들의 개수를 최소한으로 이용해서 그 가치의 합이 M이 되도록 함
- M을 만들기 위한 최소한의 화폐 개수 찾기


난이도 : 중 | 풀이시간 : 30분 | 시간제한 : 1초 | 메모리제한 : 128MB
문제 : M을 만들기 위한 최소한의 화폐 개수 찾기

입력조건 :화폐개수 n, 금액 m   
          (1<= N <= 100,  1 <= M <= 10,000)
          이후 n개 줄에 각 화폐의 가치 입력(단, 화폐의 가치는 10,000보다 작거나 같은 자연수)
          
출력조건 : 최소 화폐 개수 출력. 불가능할 때는 -1 출력

예시 :2 15 
      2
      3
출력 : 5

풀이 : 
  1. 화폐 금액의 인덱스를 만든다.
  2. 인덱스 각 금액을 화폐단위로 나눈 횟수 입력

"""

# 정수 N, M을 입력 받기
n, m = map(int, input().split())
# N개의 화폐 단위 정보를 입력 받기
array = []
for i in range(n):
    array.append(int(input()))

# 한 번 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [10001] * (m + 1)

# 다이나믹 프로그래밍(Dynamic Programming) 진행(보텀업)
d[0] = 0
for i in range(n):
    for j in range(array[i], m + 1):
        if d[j - array[i]] != 10001: # (i - k)원을 만드는 방법이 존재하는 경우
            d[j] = min(d[j], d[j - array[i]] + 1)

# 계산된 결과 출력
if d[m] == 10001: # 최종적으로 M원을 만드는 방법이 없는 경우
    print(-1)
else:
    print(d[m])