"""
개미 식량창고 털기
  - 가장 먼저 그리디, 구현, 완전 탐색으로 풀 수 있는지 확인! -> 안떠오르면 DP
  - 우선 재귀함수로 만들어 놓고 탑다운 방식으로 코드 개선
  - 일반적인 코테는 기본 유형의 DP 출제


난이도 : 중 | 풀이시간 : 30분 | 시간제한 : 1초 | 메모리제한 : 128MB
문제 : 연결되어 있지 않은(바로 옆이 아닌) 식량창고의 값의 합이 최대가 되는 값

입력조건 :식량창고개수 N, 창고내 식량개수 K 공백 기준으로 구분 입력  
          (3<= N <= 100, 1<=K<=1,000)
          
출력조건 : 얻을 수 있는 식량의 최댓값

예시 : 4 
      1 3 1 5 
출력 : 8

풀이 :
  a_i = i번째 식량창고까지의 최적해 (얻을 수 있는 식량의 최댓값)
   1. i번째까지의 합
    1-1) (i-1)까지의 합 : i-1을 선택하면 i번째는 선택하지 못하므로
    1-2) (i-2)까지의 합과 i번째 합
    위 두개를 비교했을 때 max 값 선택
    * (i-3)까지의 합의 최댓값은 비교할 필요 없음. 
-> 문제와 해답의 매치가 이해가 안됨..
창고는 여러개 털 수 있는게 아닌가? (1개 이상 선택)

"""

n = int(input())
k_list = list(map(int, input().split()))

d = [0] * 100

d[0] = k_list[0]
d[1] = max(k_list[0], k_list[1])

for i in range(2, n):
  d[i] = max(k_list[i-1], k_list[i-2] + k_list[i])

print(d[n-1])